schema {
    query : Query
    mutation: Mutation
}

type Query {
    publications(start: Int, size: Int, status: String, keywords: [String],
                 consortiumPaper: Boolean, alleles: Boolean, cites: Boolean,
                 orderBy: PublicationOrderByInput, search: String,
                 publicationYearFrom: Int, publicationYearTo: Int): [Publication]
    publication(id: String): Publication
    publicationByPmid(pmid: String): Publication
    publicationsByReviewed(status: String, start: Int, size: Int): [Publication]
    count(status: String, keywords: [String], consortiumPaper: Boolean, alleles: Boolean, cites: Boolean, search: String, publicationYearFrom: Int, publicationYearTo: Int): Int
}

type Mutation {
    updateReviewed(pmid: String!, status: String, alleles: [AlleleRefInput], consortiumPaper: Boolean, alleleCandidates: [AlleleRefInput], comment: String): Publication
}

type Publication {
    title: String
    pmid: String
    pmcid: String
    doi: String
    authorString: String
    pubYear: Int
    pageInfo: String
    abstractText: String
    journalInfo: JournalInfo
    authorList: [Author]
    grantsList: [Grant]
    fullTextUrlList: [FullTextUrl]
    alleles: [AlleleRef]
    datasource: String
    fragments: [Fragment]
    citations: [Citation]
    cites: [String]
    keyword: String
    firstPublicationDate: String
    alleleCandidates: [AlleleRef]
    consortiumPaper: Boolean
    correspondence: [Correspondence]
    status: String
    comment: String
}

type Correspondence {
    authors: [String],
    emails: [String]
}



input PublicationFilter {
    title: String
    pmid: String
    pmcid: String
    doi: String
    authorString: String
    pubYear: Int
    pageInfo: String
    abstractText: String
    datasource: String
    keyword: String
    firstPublicationDate: String
    authorList: [AuthorFilter]
    consortiumPaper: Boolean
    status: String
}

input AuthorFilter {
    fullName: String
    firstName: String
    lastName: String
    initials: String
    affiliation: String
}

enum PublicationOrderByInput {
  title_ASC
  title_DESC
  authorList_ASC
  authorList_DESC
  keyword_ASC
  keyword_DESC
  firstPublicationDate_ASC
  firstPublicationDate_DESC
  journal_ASC
  journal_DESC
}

type JournalInfo {
    issue: String
    volume: String
    journalIssueId: String
    dateOfPublication: String
    monthOfPublication: String
    yearOfPublication: String
    printPublicationDate: String
    journal: Journal
}

type Journal {
    title: String
    medlineAbbreviation: String
    essn: String
    issn: String
    isoabbreviation: String
    nlmid: String
}

type Grant {
    grantId: String
    agency: String
    acronym: String
}

type Author {
    fullName: String
    firstName: String
    lastName: String
    initials: String
    affiliation: String
}

type AlleleRef {
    acc: String
    gacc: String
    geneSymbol: String
    project: String
    alleleName: String
    alleleSymbol: String
    orderId: String
    emmaId: String
}

input AlleleRefInput{
    acc: String
    gacc: String
    geneSymbol: String
    project: String
    alleleName: String
    alleleSymbol: String
    orderId: String
    emmaId: String
}

type FullTextUrl {
    availabilty: String
    documentStyle: String
    site: String
    url: String
}

type Fragment {
    keyword: String
    mentions: [String]
}

type AlleleMention {
    alleleSymbol: String
    mentions: [String]
}

type Citation {
  pmid: String
  references: [String]
}